# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
variables:
- name: DEV_ENVIRONMENT
  value: dev
pool:
  vmImage: ubuntu-latest
stages:
  - stage: TerraformValidate
    jobs:
    - job: terrafformValidateJob
      continueOnError: false
      steps:
         - task: PublishPipelineArtifact@1
           inputs:
             targetPath: '$(Pipeline.Workspace)'
             artifact: 'manifest-out'
             publishLocation: 'pipeline'
         - task: TerraformTaskV4@4
           inputs:
             provider: 'azurerm'
             command: 'init'
             workingDirectory: '$(System.DefaultWorkingDirectory)/manifest1'
             backendAzureRmUseEntraIdForAuthentication: true
             backendServiceArm: 'aks-terraform'
             backendAzureRmResourceGroupName: 'terraform-storage-rg'
             backendAzureRmStorageAccountName: 'terraformtfstate1844'
             backendAzureRmContainerName: 'tfstatefiles'
             backendAzureRmKey: 'aks-base.tfstate'
         - task: TerraformTaskV4@4
           inputs:
             provider: 'azurerm'
             command: 'validate'
             workingDirectory: '$(System.DefaultWorkingDirectory)/manifest1'
  - stage: DeployAksCluster
    jobs:
    - deployment: DeployAksKluster
      displayName: DeployAksKluster
      pool:
        vmImage: ubuntu-latest
      environment: $(DEV_ENVIRONMENT)
      strategy: 
       runOnce:
         deploy:
           steps:
             - task: TerraformTaskV4@4
               inputs:
                 provider: 'azurerm'
                 command: 'init'
                 workingDirectory: '$(Pipeline.Workspace)/manifest-out'
                 backendAzureRmUseEntraIdForAuthentication: true
                 backendServiceArm: 'aks-terraform'
                 backendAzureRmResourceGroupName: 'terraform-storage-rg'
                 backendAzureRmStorageAccountName: 'terraformtfstate1844'
                 backendAzureRmContainerName: 'tfstatefiles'
                 backendAzureRmKey: 'aks-base.tfstate'
             - task: TerraformTaskV4@4
               inputs:
                 provider: 'azurerm'
                 command: 'plan'
                 workingDirectory: '$(Pipeline.Workspace)/manifest-out'
                 environmentServiceNameAzureRM: 'aks-terraform'
             - task: TerraformTaskV4@4
               inputs:
                 provider: 'azurerm'
                 command: 'apply'
                 workingDirectory: '$(Pipeline.Workspace)/manifest-out'
                 environmentServiceNameAzureRM: 'aks-terraform'
        
          
         