trigger:

- master

pool:
  vmImage: ubuntu-latest

##Stage-1: Terraform Validate Stage

## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)
stages:
- stage: TerraformValidate
  jobs:
  - job: TerraformValidateJob
    continueOnError: false
    steps:
    - task: PublishPipelineArtifact@1
      displayName: Publish Artifacts
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        artifact: 'terraform-manifests-out'
        publishLocation: 'pipeline'
    - task: TerraformInstaller@0
      displayName: Terraform Install
      inputs:
        terraformVersion: 'latest'
    - task: TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        backendType: azurerm
        # Service connection to authorize backend access. Supports Subscription & Management Group Scope
        backendServiceArm: 'terraform-aks-azurerm-svc-con'
        # Tenant id of the target backend. This can be used to override the default tenant id inherited from the service connection
        backendAzureRmTenantId: 'ec77650f-2367-43f8-b2dc-fd717e900d7f'
        # Subscription id of the target backend. This can be used to specify the subscription when using Management Group scoped
        # Service connection or to override the subscription id defined in a Subscription scoped service connection
        backendAzureRmSubscriptionId: 'my-backend-subscription-id'
        # create backend storage account if doesn't exist
        ensureBackend: true
        backendAzureRmResourceGroupName: 'my-backend-resource-group'
        # azure location shortname of the backend resource group and storage account
        backendAzureRmResourceGroupLocation: 'eastus'
        backendAzureRmStorageAccountName: 'my-backend-storage-account'
        # azure storage account sku, used when creating the storage account
        backendAzureRmStorageAccountSku: 'Standard_RAGRS'
        # azure blob container to store the state file
        backendAzureRmContainerName: 'my-backend-blob-container'
        # azure blob file name
        backendAzureRmKey: infrax.tfstate